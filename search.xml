<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo静态博客]]></title>
    <url>%2F2017%2F08%2F01%2Fother_hexo%2F</url>
    <content type="text"><![CDATA[最近有时间折腾下个人博客，在对比了几家之后，最终决定用Hexo作为框架。选择Hexo的原因很多，首先是静态博客，服务器开销小。其次是简洁，支持markdown语法，用起来舒服。再次是可以直接发布到github pages上。最后是插件很多，可以DIY。在博客搭建的过程中也踩了些坑，在这里做下记录，也方便大家搭建个人博客时做参考。 hexo安装依赖nodejs环境，按照官网的命令执行即可，没什么坑。12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server next皮肤安装next皮肤的文档写的非常详细，github上的关注度在所有皮肤里遥遥领先，所以选择next。皮肤安装依赖git，需要先安装下git，按照官网命令按照即可。12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next hexo-admin可视化后台安装首页文章不全显示分类、tag站内搜索中文url permalink 做覆盖404页面、自定义页面社交账号rss订阅百度统计一键部署到github page、自己的ECS添加seo优化文章浏览次数统计评论评论功能一直没有搞定。网易云跟贴、多说因为要关闭，没法使用。友言太老，还停留再开心网的时代。畅言调通了，但弹框太多，找了半天也没法关闭他的社区功能，所以放弃。]]></content>
  </entry>
  <entry>
    <title><![CDATA[web性能优化实践]]></title>
    <url>%2F2017%2F07%2F31%2Fweb_performance_yahoo%2F</url>
    <content type="text"><![CDATA[用户体验这几年被提及的越来越多，产品不再仅仅满足于实现功能，对于用户的使用感受也越来越重视。加载延迟、操作卡顿这些性能问题，都会严重影响用户体验，尤其在手机端，这些问题会被放大。那么如何来做性能优化呢？雅虎的工程师，总结了一套web性能优化最佳实践，业内俗称雅虎军规，雅虎军规目前一共35条，写的非常详细。本文参考雅虎军规，侧重于实践，结合项目来看下如何做优化，以及优化所带来的提升。 雅虎军规原文：https://developer.yahoo.com/performance/rules.html雅虎军规译文：http://www.cnblogs.com/li0803/archive/2009/09/20/1570581.html 前阵子做了个手机App，用的是混合开发模式，技术选型是cordova+vue.js。我也就以此项目为例，看下如何做性能优化。 未经优化项目开发完成后，部署到自己的ECS（1M带宽）上，自测发现页面需要很长时间才能显示出来。于是我用https://gtmetrix.com/进行了测试，结果如下。这是使用电脑、有线、且只有一个人访问的情况下看到的数据。如果用手机、无线、且多人访问，那数据更是惨不忍睹，所以必须要进行优化。 CDN加速之前我提过，我用的ECS带宽是1M，有点小，那么为什么不加大带宽呢？原因如下： 要钱，一个月得多花个一两百块钱。对于我这样的独立开发者，是要精打细算过日子的。 带宽加到多少合适？这个不好评估。有人说可以按量付费，阿里云的流量是0.8元/GB，看起来还能接受。 有没有更好的解决办法呢，PageSpeed和YSlow给出的建议里，都有使用CDN加速。 CDN可以让资源分发到离用户最近的节点，用户经过较少的路由，就能快速获取资源，因此可以提供比服务器带宽更好的服务效果。 CDN的带宽是共享的，不需要担心下载速度。 CDN的费用相比服务器带宽要便宜，阿里云的CDN带宽是0.272元/GB。 效果好还便宜，所以我们选择CDN，下面是经过cdn加速后的结果。 压缩、gzip压缩的好处，首先是下载快，其次是省流量省钱。具体做法： 首先是对原始文件进行压缩。如文本文件去空格，vue构建工具已经做了此事；图片缩减大小，我通过此网站对图片都做了处理。 其次是服务端开启gzip压缩。 实际使用时，我将ECS作为CDN的回源服务器，先对ECS上的资源做了处理，通过nginx开启gzip压缩（配置代码如下）。然而阿里云的CDN并不是像我想的那样，将我给他的东西原封不动的给用户，阿里云默认并不开启gzip压缩，需要自己去设置下。 12345678gzip on;gzip_min_length 1k;gzip_buffers 4 16k;#gzip_http_version 1.0;gzip_comp_level 1;gzip_types application/javascript text/css application/json image/jpeg image/png;gzip_vary off;gzip_disable "MSIE [1-6]\."; 加速后的效果 过期时间参考facebook的过期时间设置，我也添加了相应的cache-control和expires头，设置成永不过期，如果需要更新，可以通过构建加md5后缀的方式来绕开缓存。截图里还有两个很重要的响应头，ETag和Last-Modified，大家可以自行百度看下他俩的作用。不过通过chrome进行测试发现，加不加这两个头对于资源是否重新请求影响不大。个人猜测应该是现代浏览器比较智能，可以基于资源类型判断是否需要缓存。所以对于这点是否要优化，我也持保留意见。 其他性能优化过程中还有几个比较重要的点，因为vue框架已经帮我们做过，我们可能并未察觉，但我要在这里再提下。 css需要写在头部；js需要写在底部。这样可以减少白屏时间，让用户更早的看到页面。 css、js合并，这个可以通过构建工具来完成。 总结雅虎军规很经典，很详细，实际使用中，不少的点因为历史发展原因，我们不一定能遇到。实际项目中可以重点考虑CDN加速、资源压缩、资源合并这三个点，配合评分工具，对网站性能做提升。]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web开发小工具]]></title>
    <url>%2F2017%2F07%2F30%2Fweb_tools%2F</url>
    <content type="text"><![CDATA[分辨率统计web开发时，一般会有分辨率适配的需求。这时我们首先要做的是，了解当下主流分辨率，以便做重点测试。相关数据可以参考【百度分辨率统计】。 分辨率效果查看页面合成时，我们希望能同时看到不同分辨率下的页面效果。推荐【响应式设计开发工具】 分辨率检测真机测试发现问题时，我们需要获取真机的分辨率信息。推荐【此工具】，可以查看分辨率，dpr等重要信息。 html5支持度评分检测当前浏览器对于html5的支持程度，给出相应分数、详细说明，【在线地址】。使用场景是，发现某个设备有兼容性问题时，运行下来定位原因。 Html5支持度统计在使用一些h5新特性时，有必要了解下此特性的兼容情况，【在线地址】。同时此工具可以以国家为单位，提供支持度统计数据。 性能评分工具非常优秀的一款网页性能评分工具，性能标准参考了google的PageSpeed，yahoo的Yslow。【在线地址】。性能优化是个大的话题，我会用单独的文章来写。大家可以先用下此工具，看下自己做的项目能得多少分，有哪些地方可以优化，尤其是我红色标出的4个tab，需要重点看下。 其他小工具 二维码生成/解码 【在线地址】 正则测试【在线地址】 加解密 【在线地址】 图片压缩 【在线地址】 屏幕取色工具 【下载地址】]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>工具</tag>
      </tags>
  </entry>
</search>