<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo静态博客]]></title>
    <url>%2F2017%2F08%2F01%2Fother_hexo%2F</url>
    <content type="text"><![CDATA[最近有时间折腾下个人博客，在对比了几家之后，最终决定用Hexo作为框架。选择Hexo的原因很多，首先是静态博客，服务器开销小。其次是简洁，支持markdown语法，用起来舒服。再次是可以直接发布到github pages上。最后是插件很多，可以DIY。在博客搭建的过程中也踩了些坑，在这里做下记录，也方便大家搭建个人博客时做参考。 hexo安装依赖nodejs环境，按照hexo官网的命令操作即可，我也把命令贴在了下面。有个小的细节需要注意，官网提供了多语言支持，可以切换成简体中文，对于我这种更喜欢看中文文档的人，这个功能还是很不错的。12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server hexo-admin可视化后台安装安装完hexo后，就可以写文章了，但得通过命令行的方式创建文章，还得找个markdown的编辑器，这点不是很易用，我们更希望有一个可视化的编辑后台，这个时候hexo-admin就派上用场了。通过npm进行安装，安装命令如下。安装完成后，打开http://localhost:4000/admin/ ，即可进行可视化编辑。hexo-admin支持markdown编辑，支持贴图，支持添加分类、标签。虽然整个后台看起来比较简单，但是很实用。1npm install --save hexo-admin NexT皮肤安装hexo支持皮肤，我选择了经典的NexT 皮肤，NexT 皮肤的官方文档写的非常详细，github上的关注度也非常高。实际使用时，感觉这套皮肤每个细节考虑的都很周到，遇到问题基本都可以通过官方文档来找到解决办法。皮肤安装依赖git，按照官网提供的命令执行即可12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 如何设置「阅读全文」在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT 提供三种方式来控制文章在首页的显示，具体可以参考http://theme-next.iissnan.com/faqs.html#read-more。我的博客是一、二两种结合着使用。同时这个设置对seo也有影响，设置的内容会成为页面的描述信息。 添加分类、标签页按照分类、标签查看文章是个比较基本的需求。NexT皮肤默认并没有这两个页面，需要按照文档说明自己添加下。添加标签页说明：http://theme-next.iissnan.com/theme-settings.html#tags-page添加分类页说明：http://theme-next.iissnan.com/theme-settings.html#categories-page 站内搜索文章较多时，需要有文章搜索功能，我选择了local-search插件。添加站内搜索说明：http://theme-next.iissnan.com/third-party-services.html#local-search 404页面、自定义页面如果你不仅仅满足于NexT所提供的页面，你也可以添加自己的页面。但记住，这些页面需要放在皮肤的source文件夹下，这样在发布和部署时就能很方便的一起打包。之前自己将页面放在了根目录的source下，页面发布出来就不是自己想要的样子了。 部署到github page当初选择hexo，一个重要的原因是可以部署到github page。官网提供了一键部署的工具，操作起来没什么坑，可以参考官方文档https://hexo.io/zh-cn/docs/deployment.html#Git。但是，实际使用时，发现github page访问速度太慢，体验不是很好。 部署到自己的服务器上github page速度太慢，于是选择部署在自己的ECS服务器上，用nginx发布静态文件，用CDN做加速，访问速度还不错。每次写完文章后，懒得手动上传文件，那么就通过插件来上传。开始试了FTPSync，通过FTP协议进行上传，我用vsftp配置好了FTP服务，但每次文件传一半就失败，不知道什么原因。后来换了SFTP插件https://hexo.io/docs/deployment.html#SFTP，通过ssh协议进行上传，很快就可以调通，所以也推荐这种方式进行一键部署。 评论评论功能一直没有搞定，试了很多，都不满意。网易云跟贴、多说因为要关闭，没法使用，放弃。友言太老，还停留再开心网的时代，放弃。disqus要翻墙才能用，放弃。HyperComments聊天框是繁体中文，放弃。畅言可以用，但弹框太多，找了半天也没法关闭他的社区功能，目前作为备选方案。也在持续的找评论插件，如果有满意的，也会尽快添加此功能，并更新此文章。 其他配置头像、社交账号，RSS订阅、百度统计、版权声明等，这些都可以在Next官方文档上找到对于说明，没有什么坑，只要仔细阅读文档，按照操作即可。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web性能优化实践]]></title>
    <url>%2F2017%2F07%2F31%2Fweb_performance_yahoo%2F</url>
    <content type="text"><![CDATA[用户体验这几年被提及的越来越多，产品不再仅仅满足于实现功能，对于用户的使用感受也越来越重视。加载延迟、操作卡顿这些性能问题，都会严重影响用户体验，尤其在手机端，这些问题会被放大。那么如何来做性能优化呢？雅虎的工程师，总结了一套web性能优化最佳实践，业内俗称雅虎军规，雅虎军规目前一共35条，写的非常详细。本文参考雅虎军规，侧重于实践，结合项目来看下如何做优化，以及优化所带来的提升。 雅虎军规原文：https://developer.yahoo.com/performance/rules.html雅虎军规译文：http://www.cnblogs.com/li0803/archive/2009/09/20/1570581.html 前阵子做了个手机App，用的是混合开发模式，技术选型是cordova+vue.js。我也就以此项目为例，看下如何做性能优化。 未经优化项目开发完成后，部署到自己的ECS（1M带宽）上，自测发现页面需要很长时间才能显示出来。于是我用https://gtmetrix.com/进行了测试，结果如下。这是使用电脑、有线、且只有一个人访问的情况下看到的数据。如果用手机、无线、且多人访问，那数据更是惨不忍睹，所以必须要进行优化。 CDN加速之前我提过，我用的ECS带宽是1M，有点小，那么为什么不加大带宽呢？原因如下： 要钱，一个月得多花个一两百块钱。对于我这样的独立开发者，是要精打细算过日子的。 带宽加到多少合适？这个不好评估。有人说可以按量付费，阿里云的流量是0.8元/GB，看起来还能接受。 有没有更好的解决办法呢，PageSpeed和YSlow给出的建议里，都有使用CDN加速。 CDN可以让资源分发到离用户最近的节点，用户经过较少的路由，就能快速获取资源，因此可以提供比服务器带宽更好的服务效果。 CDN的带宽是共享的，不需要担心下载速度。 CDN的费用相比服务器带宽要便宜，阿里云的CDN带宽是0.272元/GB。 效果好还便宜，所以我们选择CDN，下面是经过cdn加速后的结果。 压缩、gzip压缩的好处，首先是下载快，其次是省流量省钱。具体做法： 首先是对原始文件进行压缩。如文本文件去空格，vue构建工具已经做了此事；图片缩减大小，我通过此网站对图片都做了处理。 其次是服务端开启gzip压缩。 实际使用时，我将ECS作为CDN的回源服务器，先对ECS上的资源做了处理，通过nginx开启gzip压缩（配置代码如下）。然而阿里云的CDN并不是像我想的那样，将我给他的东西原封不动的给用户，阿里云默认并不开启gzip压缩，需要自己去设置下。 12345678gzip on;gzip_min_length 1k;gzip_buffers 4 16k;#gzip_http_version 1.0;gzip_comp_level 1;gzip_types application/javascript text/css application/json image/jpeg image/png;gzip_vary off;gzip_disable "MSIE [1-6]\."; 加速后的效果 过期时间参考facebook的过期时间设置，我也添加了相应的cache-control和expires头，设置成永不过期，如果需要更新，可以通过构建加md5后缀的方式来绕开缓存。截图里还有两个很重要的响应头，ETag和Last-Modified，大家可以自行百度看下他俩的作用。不过通过chrome进行测试发现，加不加这两个头对于资源是否重新请求影响不大。个人猜测应该是现代浏览器比较智能，可以基于资源类型判断是否需要缓存。所以对于这点是否要优化，我也持保留意见。后续也会对这块进行深入学习，更新这块的知识点。 其他性能优化过程中还有几个比较重要的点，因为vue框架已经帮我们做过，我们可能并未察觉，但我要在这里再提下。 css需要写在头部；js需要写在底部。这样可以减少白屏时间，让用户更早的看到页面。 css、js合并，这个可以通过构建工具来完成。 总结雅虎军规很经典，很详细，实际使用中，不少的点因为历史发展原因，我们不一定能遇到。实际项目中可以重点考虑CDN加速、资源压缩、资源合并这三个点，配合评分工具，对网站性能做提升。]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web开发小工具]]></title>
    <url>%2F2017%2F07%2F30%2Fweb_tools%2F</url>
    <content type="text"><![CDATA[分辨率统计web开发时，一般会有分辨率适配的需求。这时我们首先要做的是，了解当下主流分辨率，以便做重点测试。相关数据可以参考【百度分辨率统计】。 分辨率效果查看页面合成时，我们希望能同时看到不同分辨率下的页面效果。推荐【响应式设计开发工具】 分辨率检测真机测试发现问题时，我们需要获取真机的分辨率信息。推荐【此工具】，可以查看分辨率，dpr等重要信息。 html5支持度评分检测当前浏览器对于html5的支持程度，给出相应分数、详细说明，【在线地址】。使用场景是，发现某个设备有兼容性问题时，运行下来定位原因。 Html5支持度统计在使用一些h5新特性时，有必要了解下此特性的兼容情况，【在线地址】。同时此工具可以以国家为单位，提供支持度统计数据。 性能评分工具非常优秀的一款网页性能评分工具，性能标准参考了google的PageSpeed，yahoo的Yslow。【在线地址】。性能优化是个大的话题，我会用单独的文章来写。大家可以先用下此工具，看下自己做的项目能得多少分，有哪些地方可以优化，尤其是我红色标出的4个tab，需要重点看下。 其他小工具 二维码生成/解码 【在线地址】 正则测试【在线地址】 加解密 【在线地址】 图片压缩 【在线地址】 屏幕取色工具 【下载地址】]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>工具</tag>
      </tags>
  </entry>
</search>